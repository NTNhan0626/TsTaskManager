
import readlineSync from 'readline-sync';

import { EmployeeService } from "./services/EmployeeService";
import { ProjectService } from "./services/ProjectService";
import { TaskService } from "./services/TaskService";

// Kh·ªüi t·∫°o service
const empService = new EmployeeService();
const projectService = new ProjectService();
const taskService = new TaskService();

function mainMenu() {
    while (true) {
        console.log("\n=== QU·∫¢N L√ù H·ªÜ TH·ªêNG ===");
        console.log("1. Qu·∫£n l√Ω nh√¢n vi√™n");
        console.log("2. Qu·∫£n l√Ω d·ª± √°n");
        console.log("3. Qu·∫£n l√Ω c√¥ng vi·ªác");
        console.log("0. Tho√°t");

        const choice = readlineSync.question("Ch·ªçn: ");

        switch (choice) {
            case "1":
                manageEmployee();
                break;
            case "2":
                manageProject();
                break;
            case "3":
                manageTask();
                break;
            case "0":
                console.log("T·∫°m bi·ªát!");
                return;
            default:
                console.log("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        }
    }
}

// Qu·∫£n l√Ω nh√¢n vi√™n
function manageEmployee() {
    while (true) {
        console.log("\n--- QU·∫¢N L√ù NH√ÇN VI√äN ---");
        console.log("1. Th√™m nh√¢n vi√™n");
        console.log("2. C·∫≠p nh·∫≠t nh√¢n vi√™n");
        console.log("3. Xem danh s√°ch nh√¢n vi√™n");
        console.log("4. T√¨m nh√¢n vi√™n theo ID");
        console.log("0. Quay l·∫°i");

        const choice = readlineSync.question("Ch·ªçn: ");
        switch (choice) {
            case "1":
                const id = readlineSync.question("ID: ");
                const name = readlineSync.question("T√™n: ");
                const role = readlineSync.question("Ch·ª©c v·ª•: ");
                empService.addEmployee({ id, name, role });
                console.log("‚úÖ ƒê√£ th√™m nh√¢n vi√™n");
                break;
            case "2":
                const uid = readlineSync.question("Nh·∫≠p ID nh√¢n vi√™n c·∫ßn c·∫≠p nh·∫≠t: ");
                const newName = readlineSync.question("T√™n m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n): ");
                const newRole = readlineSync.question("Ch·ª©c v·ª• m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n): ");
                empService.updateEmployee(uid, {
                    name: newName || undefined,
                    role: newRole || undefined,
                });
                console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t");
                break;
            case "3":
                console.table(empService.getAllEmployees());
                break;
            case "4":
                const findId = readlineSync.question("Nh·∫≠p ID: ");
                console.log(empService.getEmployeeById(findId));
                break;
            case "0":
                return;
            default:
                console.log("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
        }
    }
}

// Qu·∫£n l√Ω d·ª± √°n
function manageProject() {
    while (true) {
        console.log("\n--- QU·∫¢N L√ù D·ª∞ √ÅN ---");
        console.log("1. T·∫°o d·ª± √°n");
        console.log("2. Xem t·∫•t c·∫£ d·ª± √°n");
        console.log("3. T√¨m d·ª± √°n theo ID");
        console.log("4. C·∫≠p nh·∫≠t d·ª± √°n");

        console.log("0. Quay l·∫°i");

        const choice = readlineSync.question("Ch·ªçn: ");
        switch (choice) {
            case "1":
                const id = readlineSync.question("ID: ");
                const name = readlineSync.question("T√™n: ");
                const desc = readlineSync.question("M√¥ t·∫£: ");

                // Hi·ªán danh s√°ch nh√¢n vi√™n hi·ªán c√≥
                console.log("üìã Danh s√°ch nh√¢n vi√™n:");
                empService.getAllEmployees().forEach(emp => {
                    console.log(`- ${emp.id}: ${emp.name}`);
                });

                const empRaw = readlineSync.question("Nh·∫≠p ID nh√¢n vi√™n tham gia (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y): ");
                const employeeIds = empRaw.split(",").map(id => id.trim()).filter(Boolean);

                projectService.createProject({
                    id,
                    name,
                    description: desc,
                    tasks: [],
                    employee: employeeIds
                });

                console.log("‚úÖ ƒê√£ t·∫°o d·ª± √°n v√† g√°n nh√¢n vi√™n");
                break;

            case "2":
                console.table(projectService.getAllProject());
                break;
            case "3":
                const pid = readlineSync.question("Nh·∫≠p ID d·ª± √°n: ");
                console.log(projectService.getProjectById(pid));
                break;
            case "4":
                const updateId = readlineSync.question("Nh·∫≠p ID d·ª± √°n c·∫ßn c·∫≠p nh·∫≠t: ");

                const current = projectService.getProjectById(updateId);
                if (!current) {
                    console.log("‚ùå Kh√¥ng t√¨m th·∫•y d·ª± √°n.");
                    break;
                }

                console.log("üìã Th√¥ng tin hi·ªán t·∫°i:");
                console.log(current);

                const newName = readlineSync.question("T√™n m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n): ");
                const newDesc = readlineSync.question("M√¥ t·∫£ m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n): ");
                // G·ª£i √Ω danh s√°ch nh√¢n vi√™n hi·ªán t·∫°i
                console.log("üìã Danh s√°ch nh√¢n vi√™n:");
                empService.getAllEmployees().forEach(emp => {
                    console.log(`- ${emp.id}: ${emp.name}`);
                });
                const newEmpRaw = readlineSync.question("Nh·∫≠p ID nh√¢n vi√™n m·ªõi cho d·ª± √°n (ph√¢n c√°ch d·∫•u ph·∫©y, b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n): ");
                const newEmployee = newEmpRaw
                    ? newEmpRaw.split(",").map(e => e.trim()).filter(Boolean)
                    : undefined;

                const updated = projectService.updateProject(updateId, {
                    name: newName || undefined,
                    description: newDesc || undefined,
                    employee: newEmployee,
                });

                if (updated) {
                    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ª± √°n");
                } else {
                    console.log("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
                }
                break;
            case "0":
                return;
            default:
                console.log("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
        }
    }
}

// Qu·∫£n l√Ω c√¥ng vi·ªác
function manageTask() {
    while (true) {
        console.log("\n--- QU·∫¢N L√ù C√îNG VI·ªÜC ---");
        console.log("1. T·∫°o task");
        console.log("2. C·∫≠p nh·∫≠t task");
        console.log("3. Xem t·∫•t c·∫£ task");
        console.log("4. T√¨m task theo ID");
        console.log("0. Quay l·∫°i");

        const choice = readlineSync.question("Ch·ªçn: ");
        switch (choice) {
            case "1":
                const id = readlineSync.question("ID: ");
                const title = readlineSync.question("Ti√™u ƒë·ªÅ: ");
                const description = readlineSync.question("M√¥ t·∫£: ");
                const projectId = readlineSync.question("Thu·ªôc d·ª± √°n (ID): ");
                const parentTaskId = readlineSync.question("Nh·∫≠p id task cha n·∫øu ƒë√¢y l√† task g·ªëc b·ªè tr·ªëng: ");
                // Hi·ªán danh s√°ch nh√¢n vi√™n
                console.log("üìã Danh s√°ch nh√¢n vi√™n:");
                empService.getAllEmployees().forEach(emp => {
                    console.log(`- ${emp.id}: ${emp.name}`);
                });

                const assigneeRaw = readlineSync.question("Nh·∫≠p ID nh√¢n vi√™n th·ª±c hi·ªán task (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y): ");
                const assigneeIds = assigneeRaw.split(",").map(id => id.trim()).filter(Boolean);

                taskService.createTask({
                    id,
                    title,
                    description,
                    projectId,
                    completed: false,
                    dueDate: "",
                    assigneeIds,
                    parentTaskId,
                    subTaskIds:[]
                });

                console.log("‚úÖ ƒê√£ t·∫°o task v√† g√°n nh√¢n vi√™n");
                break;

            case "2":
                const tid = readlineSync.question("ID task c·∫ßn s·ª≠a: ");
                const newTitle = readlineSync.question("Ti√™u ƒë·ªÅ m·ªõi: ");
                const newDesc = readlineSync.question("M√¥ t·∫£ m·ªõi: ");
                taskService.updateTask(tid, {
                    title: newTitle || undefined,
                    description: newDesc || undefined,
                });
                console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t task");
                break;
            case "3":
                console.log(taskService.getAllTask());
                break;
            case "4":
                const findTid = readlineSync.question("ID: ");
                console.log(taskService.getTaskByProjectId(findTid));
                break;
            case "0":
                return;
            default:
                console.log("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
        }
    }
}


mainMenu();
